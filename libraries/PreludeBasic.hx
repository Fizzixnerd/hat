module PreludeBasic
(Var "!!",Value {args = 2, fixity = L, priority = 9, letBound = True, traced = False})
(Var "$",Value {args = 2, fixity = R, priority = 0, letBound = True, traced = False})
(Var "$!",Value {args = 2, fixity = R, priority = 0, letBound = True, traced = False})
(Var "%",Value {args = 2, fixity = L, priority = 7, letBound = True, traced = False})
(Var "&&",Value {args = 2, fixity = R, priority = 3, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).appendFile",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).catch",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).error",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).getChar",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).getContents",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).ioError",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).isAlpha",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).isAlphaNum",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).isAscii",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).isControl",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).isDigit",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).isHexDigit",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).isLatin1",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).isLower",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).isOctDigit",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).isPrint",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).isSpace",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).isUpper",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primCharToInt",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDecodeDouble",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDecodeFloat",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleAbs",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleAcos",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleAdd",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleAsin",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleAtan",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleCos",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleDigits",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleDiv",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleEq",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleExp",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleFromInteger",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleGe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleGt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleIsDenormalized",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleIsIEEE",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleIsInfinite",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleIsNaN",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleIsNegativeZero",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleLe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleLog",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleLt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleMul",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleNe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoublePi",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleRadix",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleRange",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleSignum",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleSin",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleSqrt",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleSub",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primDoubleTan",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primEncodeDouble",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primEncodeFloat",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatAbs",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatAcos",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatAdd",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatAsin",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatAtan",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatCos",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatDigits",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatDiv",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatEq",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatExp",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatFromInteger",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatGe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatGt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatIsDenormalized",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatIsIEEE",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatIsInfinite",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatIsNaN",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatIsNegativeZero",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatLe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatLog",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatLt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatMul",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatNe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatPi",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatRadix",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatRange",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatSignum",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatSin",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatSqrt",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatSub",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primFloatTan",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIOBind",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIOErrorShow",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIOReturn",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntAbs",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntEq",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntFromInteger",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntGe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntGt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntLe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntLt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntMaxBound",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntMinBound",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntMinus",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntNe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntNegate",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntPlus",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntQuot",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntRem",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntSignum",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntTimes",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntToChar",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntegerAdd",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntegerEq",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntegerFromInt",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntegerGe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntegerGt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntegerLe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntegerLt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntegerMul",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntegerNe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntegerNeg",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntegerQuot",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntegerQuotRem",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntegerRem",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primIntegerSub",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).primUnicodeMaxBound",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).putChar",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).readFile",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).seq",Value {args = 2, fixity = R, priority = 0, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).toLower",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).toUpper",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).undefined",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).userError",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "(19:8-19:21,PreludeBuiltin).writeFile",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "++",Value {args = 2, fixity = R, priority = 5, letBound = True, traced = False})
(Var ".",Value {args = 3, fixity = R, priority = 9, letBound = True, traced = False})
(Var "=<<",Value {args = 2, fixity = R, priority = 1, letBound = True, traced = False})
(Var "^",Value {args = 2, fixity = R, priority = 8, letBound = True, traced = False})
(Var "^^",Value {args = 2, fixity = R, priority = 8, letBound = True, traced = False})
(Var "_filter",Value {args = 3, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "_foldr",Value {args = 3, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "all",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "alt",Value {args = 3, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "and",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "any",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "appendFile",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "approxRational",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "asTypeOf",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "asciiTab",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "break",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "catch",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "chr",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "concat",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "concatMap",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "const",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "curry",Value {args = 3, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "cycle",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "denominator",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "digitToInt",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "drop",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "dropWhile",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "either",Value {args = 3, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "elem",Value {args = 1, fixity = None, priority = 4, letBound = True, traced = False})
(Var "error",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "even",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "expt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "expts",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "filter",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "flip",Value {args = 3, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "floatToDigits",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "foldl",Value {args = 3, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "foldl1",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "foldr",Value {args = 3, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "foldr1",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "formatRealFloat",Value {args = 3, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "fromIntegral",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "fromRat",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "fromRat'",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "fst",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "gcd",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "getChar",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "getContents",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "getLine",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "head",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "id",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "init",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "intEnumFromByTo",Value {args = 3, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "intToDigit",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "integerLogBase",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "interact",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "ioError",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "isAlpha",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "isAlphaNum",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "isAscii",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "isControl",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "isDigit",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "isHexDigit",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "isLatin1",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "isLower",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "isOctDigit",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "isPrint",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "isSpace",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "isUpper",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "iterate",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "last",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "lcm",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "length",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "lex",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "lexDigits",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "lexLitChar",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "lift",Value {args = 4, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "lines",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "lookup",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "map",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "mapM",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "mapM_",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "maxExpt",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "maximum",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "maybe",Value {args = 3, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "minExpt",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "minimum",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "nonnull",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "not",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "notElem",Value {args = 1, fixity = None, priority = 4, letBound = True, traced = False})
(Var "null",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "numerator",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "numericEnumFrom",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "numericEnumFromThen",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "numericEnumFromThenTo",Value {args = 3, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "numericEnumFromTo",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "odd",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "or",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "ord",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "otherwise",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "prec",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primCharToInt",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDecodeDouble",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDecodeFloat",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleAbs",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleAcos",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleAdd",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleAsin",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleAtan",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleCos",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleDigits",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleDiv",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleEq",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleExp",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleFromInteger",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleGe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleGt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleIsDenormalized",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleIsIEEE",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleIsInfinite",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleIsNaN",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleIsNegativeZero",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleLe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleLog",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleLt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleMul",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleNe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoublePi",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleRadix",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleRange",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleSignum",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleSin",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleSqrt",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleSub",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleTan",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primEncodeDouble",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primEncodeFloat",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatAbs",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatAcos",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatAdd",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatAsin",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatAtan",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatCos",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatDigits",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatDiv",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatEq",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatExp",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatFromInteger",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatGe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatGt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatIsDenormalized",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatIsIEEE",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatIsInfinite",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatIsNaN",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatIsNegativeZero",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatLe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatLog",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatLt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatMul",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatNe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatPi",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatRadix",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatRange",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatSignum",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatSin",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatSqrt",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatSub",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatTan",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIOBind",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIOErrorShow",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIOReturn",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntAbs",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntEq",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntFromInteger",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntGe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntGt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntLe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntLt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntMaxBound",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntMinBound",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntMinus",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntNe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntNegate",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntPlus",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntQuot",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntRem",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntSignum",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntTimes",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntToChar",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerAdd",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerEq",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerFromInt",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerGe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerGt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerLe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerLt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerMul",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerNe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerNeg",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerQuot",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerQuotRem",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerRem",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerSub",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primUnicodeMaxBound",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "print",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "product",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "protectEsc",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "putChar",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "putStr",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "putStrLn",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "read",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "readDec",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "readFile",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "readFloat",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "readHex",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "readIO",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "readInt",Value {args = 4, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "readLitChar",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "readLn",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "readOct",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "readParen",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "readSigned",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "reads",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "realToFrac",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "reduce",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "repeat",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "replicate",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "reverse",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "roundTo",Value {args = 3, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "scaleRat",Value {args = 6, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "scanl",Value {args = 3, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "scanl1",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "scanr",Value {args = 3, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "scanr1",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "seq",Value {args = 2, fixity = R, priority = 0, letBound = True, traced = False})
(Var "sequence",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "sequence_",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "showChar",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "showEFloat",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "showFFloat",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "showFloat",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "showGFloat",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "showHex",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "showInt",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "showIntAtBase",Value {args = 4, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "showLitChar",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "showOct",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "showParen",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "showSigned",Value {args = 3, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "showString",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "shows",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "snd",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "span",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "splitAt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "subtract",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "sum",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "tail",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "take",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "takeWhile",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "thenAp",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "thenLex",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "toLower",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "toUpper",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "uncurry",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "undefined",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "unlines",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "until",Value {args = 3, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "unwords",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "unzip",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "unzip3",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "userError",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "words",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "writeFile",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "yield",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "zip",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "zip3",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "zipWith",Value {args = 3, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "zipWith3",Value {args = 4, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "||",Value {args = 2, fixity = R, priority = 2, letBound = True, traced = False})
(Con Data "()" "()",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "()" "(19:8-19:21,PreludeBuiltin).()",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Bool" "(19:8-19:21,PreludeBuiltin).False",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Bool" "(19:8-19:21,PreludeBuiltin).True",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Bool" "False",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Bool" "True",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Either" "Left",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Either" "Right",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "FFFormat" "FFExponent",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "FFFormat" "FFFixed",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "FFFormat" "FFGeneric",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Maybe" "Just",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Maybe" "Nothing",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Ordering" "EQ",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Ordering" "GT",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Ordering" "LT",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.10" "(19:8-19:21,PreludeBuiltin).Prelude.10",Value {args = 10, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.10" "Prelude.10",Value {args = 10, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.11" "(19:8-19:21,PreludeBuiltin).Prelude.11",Value {args = 11, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.11" "Prelude.11",Value {args = 11, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.12" "(19:8-19:21,PreludeBuiltin).Prelude.12",Value {args = 12, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.12" "Prelude.12",Value {args = 12, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.13" "(19:8-19:21,PreludeBuiltin).Prelude.13",Value {args = 13, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.13" "Prelude.13",Value {args = 13, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.14" "(19:8-19:21,PreludeBuiltin).Prelude.14",Value {args = 14, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.14" "Prelude.14",Value {args = 14, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.15" "(19:8-19:21,PreludeBuiltin).Prelude.15",Value {args = 15, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.15" "Prelude.15",Value {args = 15, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.2" "(19:8-19:21,PreludeBuiltin).Prelude.2",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.2" "Prelude.2",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.3" "(19:8-19:21,PreludeBuiltin).Prelude.3",Value {args = 3, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.3" "Prelude.3",Value {args = 3, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.4" "(19:8-19:21,PreludeBuiltin).Prelude.4",Value {args = 4, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.4" "Prelude.4",Value {args = 4, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.5" "(19:8-19:21,PreludeBuiltin).Prelude.5",Value {args = 5, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.5" "Prelude.5",Value {args = 5, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.6" "(19:8-19:21,PreludeBuiltin).Prelude.6",Value {args = 6, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.6" "Prelude.6",Value {args = 6, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.7" "(19:8-19:21,PreludeBuiltin).Prelude.7",Value {args = 7, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.7" "Prelude.7",Value {args = 7, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.8" "(19:8-19:21,PreludeBuiltin).Prelude.8",Value {args = 8, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.8" "Prelude.8",Value {args = 8, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.9" "(19:8-19:21,PreludeBuiltin).Prelude.9",Value {args = 9, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Prelude.9" "Prelude.9",Value {args = 9, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Ratio" ":%",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "[]" "(19:8-19:21,PreludeBuiltin).:",Value {args = 2, fixity = R, priority = 5, letBound = True, traced = False})
(Con Data "[]" "(19:8-19:21,PreludeBuiltin).[]",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "[]" ":",Value {args = 2, fixity = R, priority = 5, letBound = True, traced = False})
(Con Data "[]" "[]",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Bounded" "maxBound",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Bounded" "minBound",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Enum" "enumFrom",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Enum" "enumFromThen",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Enum" "enumFromThenTo",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Enum" "enumFromTo",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Enum" "fromEnum",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Enum" "pred",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Enum" "succ",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Enum" "toEnum",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Eq" "/=",Value {args = -1, fixity = None, priority = 4, letBound = True, traced = False})
(Method "Eq" "==",Value {args = -1, fixity = None, priority = 4, letBound = True, traced = False})
(Method "Floating" "**",Value {args = -1, fixity = R, priority = 8, letBound = True, traced = False})
(Method "Floating" "acos",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Floating" "acosh",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Floating" "asin",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Floating" "asinh",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Floating" "atan",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Floating" "atanh",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Floating" "cos",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Floating" "cosh",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Floating" "exp",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Floating" "log",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Floating" "logBase",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Floating" "pi",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Floating" "sin",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Floating" "sinh",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Floating" "sqrt",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Floating" "tan",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Floating" "tanh",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Fractional" "/",Value {args = -1, fixity = L, priority = 7, letBound = True, traced = False})
(Method "Fractional" "fromRational",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Fractional" "recip",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Functor" "fmap",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Integral" "div",Value {args = -1, fixity = L, priority = 7, letBound = True, traced = False})
(Method "Integral" "divMod",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Integral" "mod",Value {args = -1, fixity = L, priority = 7, letBound = True, traced = False})
(Method "Integral" "quot",Value {args = -1, fixity = L, priority = 7, letBound = True, traced = False})
(Method "Integral" "quotRem",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Integral" "rem",Value {args = -1, fixity = L, priority = 7, letBound = True, traced = False})
(Method "Integral" "toInteger",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Monad" ">>",Value {args = -1, fixity = L, priority = 1, letBound = True, traced = False})
(Method "Monad" ">>=",Value {args = -1, fixity = L, priority = 1, letBound = True, traced = False})
(Method "Monad" "fail",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Monad" "return",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Num" "*",Value {args = -1, fixity = L, priority = 7, letBound = True, traced = False})
(Method "Num" "+",Value {args = -1, fixity = L, priority = 6, letBound = True, traced = False})
(Method "Num" "-",Value {args = -1, fixity = L, priority = 6, letBound = True, traced = False})
(Method "Num" "abs",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Num" "fromInteger",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Num" "negate",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Num" "signum",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Ord" "<",Value {args = -1, fixity = None, priority = 4, letBound = True, traced = False})
(Method "Ord" "<=",Value {args = -1, fixity = None, priority = 4, letBound = True, traced = False})
(Method "Ord" ">",Value {args = -1, fixity = None, priority = 4, letBound = True, traced = False})
(Method "Ord" ">=",Value {args = -1, fixity = None, priority = 4, letBound = True, traced = False})
(Method "Ord" "compare",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Ord" "max",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Ord" "min",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Read" "readList",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Read" "readsPrec",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Real" "toRational",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "RealFloat" "atan2",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "RealFloat" "decodeFloat",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "RealFloat" "encodeFloat",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "RealFloat" "exponent",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "RealFloat" "floatDigits",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "RealFloat" "floatRadix",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "RealFloat" "floatRange",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "RealFloat" "isDenormalized",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "RealFloat" "isIEEE",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "RealFloat" "isInfinite",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "RealFloat" "isNaN",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "RealFloat" "isNegativeZero",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "RealFloat" "scaleFloat",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "RealFloat" "significand",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "RealFrac" "ceiling",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "RealFrac" "floor",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "RealFrac" "properFraction",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "RealFrac" "round",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "RealFrac" "truncate",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Show" "show",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Show" "showList",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Show" "showsPrec",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(TypeClass "()",TyCls (Ty ["()"] []))
(TypeClass "->",TyCls (Ty [] []))
(TypeClass "Bool",TyCls (Ty ["False","True"] []))
(TypeClass "Bounded",TyCls (Cls ["minBound","maxBound"]))
(TypeClass "Char",TyCls (Ty [] []))
(TypeClass "Double",TyCls (Ty [] []))
(TypeClass "Either",TyCls (Ty ["Left","Right"] []))
(TypeClass "Enum",TyCls (Cls ["succ","pred","toEnum","fromEnum","enumFrom","enumFromThen","enumFromTo","enumFromThenTo"]))
(TypeClass "Eq",TyCls (Cls ["==","/="]))
(TypeClass "FFFormat",TyCls (Ty ["FFExponent","FFFixed","FFGeneric"] []))
(TypeClass "FilePath",TyCls (Syn 0 THelper))
(TypeClass "Float",TyCls (Ty [] []))
(TypeClass "Floating",TyCls (Cls ["pi","exp","log","sqrt","**","logBase","sin","cos","tan","asin","acos","atan","sinh","cosh","tanh","asinh","acosh","atanh"]))
(TypeClass "Fractional",TyCls (Cls ["/","recip","fromRational"]))
(TypeClass "Functor",TyCls (Cls ["fmap"]))
(TypeClass "IO",TyCls (Ty [] []))
(TypeClass "IOError",TyCls (Ty [] []))
(TypeClass "Int",TyCls (Ty [] []))
(TypeClass "Integer",TyCls (Ty [] []))
(TypeClass "Integral",TyCls (Cls ["quot","rem","div","mod","quotRem","divMod","toInteger"]))
(TypeClass "Maybe",TyCls (Ty ["Nothing","Just"] []))
(TypeClass "Monad",TyCls (Cls [">>=",">>","return","fail"]))
(TypeClass "Num",TyCls (Cls ["+","-","*","negate","abs","signum","fromInteger"]))
(TypeClass "Ord",TyCls (Cls ["compare","<","<=",">=",">","max","min"]))
(TypeClass "Ordering",TyCls (Ty ["LT","EQ","GT"] []))
(TypeClass "Prelude.10",TyCls (Ty ["Prelude.10"] []))
(TypeClass "Prelude.11",TyCls (Ty ["Prelude.11"] []))
(TypeClass "Prelude.12",TyCls (Ty ["Prelude.12"] []))
(TypeClass "Prelude.13",TyCls (Ty ["Prelude.13"] []))
(TypeClass "Prelude.14",TyCls (Ty ["Prelude.14"] []))
(TypeClass "Prelude.15",TyCls (Ty ["Prelude.15"] []))
(TypeClass "Prelude.2",TyCls (Ty ["Prelude.2"] []))
(TypeClass "Prelude.3",TyCls (Ty ["Prelude.3"] []))
(TypeClass "Prelude.4",TyCls (Ty ["Prelude.4"] []))
(TypeClass "Prelude.5",TyCls (Ty ["Prelude.5"] []))
(TypeClass "Prelude.6",TyCls (Ty ["Prelude.6"] []))
(TypeClass "Prelude.7",TyCls (Ty ["Prelude.7"] []))
(TypeClass "Prelude.8",TyCls (Ty ["Prelude.8"] []))
(TypeClass "Prelude.9",TyCls (Ty ["Prelude.9"] []))
(TypeClass "Ratio",TyCls (Ty [":%"] []))
(TypeClass "Rational",TyCls (Syn 0 THelper))
(TypeClass "Read",TyCls (Cls ["readsPrec","readList"]))
(TypeClass "ReadS",TyCls (Syn 2 (TApp (TApp TFun THelper) THelper)))
(TypeClass "Real",TyCls (Cls ["toRational"]))
(TypeClass "RealFloat",TyCls (Cls ["floatRadix","floatDigits","floatRange","decodeFloat","encodeFloat","exponent","significand","scaleFloat","isNaN","isInfinite","isDenormalized","isNegativeZero","isIEEE","atan2"]))
(TypeClass "RealFrac",TyCls (Cls ["properFraction","truncate","round","ceiling","floor"]))
(TypeClass "Show",TyCls (Cls ["showsPrec","show","showList"]))
(TypeClass "ShowS",TyCls (Syn 2 (TApp (TApp TFun THelper) THelper)))
(TypeClass "String",TyCls (Ty [] []))
(TypeClass "[]",TyCls (Ty ["[]",":"] []))
