module PreludeBuiltin
(Var "appendFile",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "catch",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "error",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "getChar",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "getContents",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "ioError",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "isAlpha",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "isAlphaNum",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "isAscii",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "isControl",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "isDigit",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "isHexDigit",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "isLatin1",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "isLower",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "isOctDigit",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "isPrint",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "isSpace",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "isUpper",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primCharToInt",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDecodeDouble",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDecodeFloat",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleAbs",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleAcos",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleAdd",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleAsin",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleAtan",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleCos",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleDigits",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleDiv",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleEq",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleExp",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleFromInteger",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleGe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleGt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleIsDenormalized",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleIsIEEE",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleIsInfinite",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleIsNaN",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleIsNegativeZero",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleLe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleLog",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleLt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleMul",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleNe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoublePi",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleRadix",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleRange",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleSignum",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleSin",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleSqrt",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleSub",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primDoubleTan",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primEncodeDouble",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primEncodeFloat",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatAbs",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatAcos",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatAdd",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatAsin",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatAtan",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatCos",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatDigits",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatDiv",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatEq",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatExp",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatFromInteger",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatGe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatGt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatIsDenormalized",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatIsIEEE",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatIsInfinite",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatIsNaN",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatIsNegativeZero",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatLe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatLog",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatLt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatMul",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatNe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatPi",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatRadix",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatRange",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatSignum",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatSin",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatSqrt",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatSub",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primFloatTan",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIOBind",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIOErrorShow",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIOReturn",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntAbs",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntEq",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntFromInteger",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntGe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntGt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntLe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntLt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntMaxBound",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntMinBound",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntMinus",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntNe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntNegate",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntPlus",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntQuot",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntRem",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntSignum",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntTimes",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntToChar",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerAdd",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerEq",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerFromInt",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerGe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerGt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerLe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerLt",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerMul",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerNe",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerNeg",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerQuot",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerQuotRem",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerRem",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primIntegerSub",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "primUnicodeMaxBound",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "putChar",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "readFile",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "seq",Value {args = 2, fixity = R, priority = 0, letBound = True, traced = False})
(Var "toLower",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "toUpper",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "undefined",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "userError",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "writeFile",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Bool" "False",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Con Data "Bool" "True",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(TypeClass "Bool",TyCls (Ty ["False","True"] []))
(TypeClass "Char",TyCls (Ty [] []))
(TypeClass "Double",TyCls (Ty [] []))
(TypeClass "Float",TyCls (Ty [] []))
(TypeClass "IO",TyCls (Ty [] []))
(TypeClass "IOError",TyCls (Ty [] []))
(TypeClass "Int",TyCls (Ty [] []))
(TypeClass "Integer",TyCls (Ty [] []))
(TypeClass "String",TyCls (Syn 0 THelper))
