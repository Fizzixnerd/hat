module Monad
(Var "=<<",Value {args = 2, fixity = R, priority = 1, letBound = True, traced = False})
(Var "ap",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "filterM",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "foldM",Value {args = 3, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "guard",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "join",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "liftM",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "liftM2",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "liftM3",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "liftM4",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "liftM5",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "mapAndUnzipM",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "mapM",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "mapM_",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "msum",Value {args = 1, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "sequence",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "sequence_",Value {args = 0, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "unless",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "when",Value {args = 2, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "zipWithM",Value {args = 3, fixity = Def, priority = 9, letBound = True, traced = False})
(Var "zipWithM_",Value {args = 3, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Functor" "fmap",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Monad" ">>",Value {args = -1, fixity = L, priority = 1, letBound = True, traced = False})
(Method "Monad" ">>=",Value {args = -1, fixity = L, priority = 1, letBound = True, traced = False})
(Method "Monad" "fail",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "Monad" "return",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "MonadPlus" "mplus",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(Method "MonadPlus" "mzero",Value {args = -1, fixity = Def, priority = 9, letBound = True, traced = False})
(TypeClass "Functor",TyCls (Cls ["fmap"]))
(TypeClass "Monad",TyCls (Cls [">>=",">>","return","fail"]))
(TypeClass "MonadPlus",TyCls (Cls ["mzero","mplus"]))
